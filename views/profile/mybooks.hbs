<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Books</title>
  <link href="/css/styles.css" rel="stylesheet">
  <link rel="stylesheet" href="/fontawesome-free-6.5.2-web/css/all.min.css">

  <style>
    .book-row {
      border-bottom: 1px solid #111111;
    }
  </style>
</head>

<body>
  {{> upperPart }}

  <div id="success-message" class="hidden fixed inset-x-0 mx-auto w-full max-w-screen-md px-4 lg:z-50">
    <div role="alert"
      class="bg-green-500 text-white font-bold px-4 py-3 lg:py-2 rounded-md flex items-center justify-between shadow-md">
      <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6 hidden lg:block" fill="none"
        viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <span class="flex-grow lg:pl-3" id="success-text">Book Added successfully!</span>
      <button type="button" class="text-white close lg:pb-2" onclick="closeSuccessAlert()">
        <span aria-hidden="true" class="font-bold text-2xl">&times;</span>
      </button>
    </div>
  </div>

  <script>
    function closeSuccessAlert() {
      document.getElementById('success-message').style.display = 'none';
    }
  </script>

  <div id="success-delete" class="hidden fixed inset-x-0 mx-auto w-full max-w-screen-md px-4 lg:z-50">
    <div role="alert"
      class="bg-green-500 text-white font-bold px-4 py-3 lg:py-2 rounded-md flex items-center justify-between shadow-md">
      <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6 hidden lg:block" fill="none"
        viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <span class="flex-grow lg:pl-3" id="success-text">Book Deleted successfully!</span>
      <button type="button" class="text-white close lg:pb-2" onclick="closeSuccessDeleteAlert()">
        <span aria-hidden="true" class="font-bold text-2xl">&times;</span>
      </button>
    </div>
  </div>

  <script>
    function closeSuccessDeleteAlert() {
      document.getElementById('success-delete').style.display = 'none';
    }
  </script>

  <div id="error-message" class="hidden fixed inset-x-0 mx-auto w-full max-w-screen-md px-4 lg:z-50">
    <div role="alert"
      class="bg-red-500 text-white font-bold px-4 py-3 lg:py-2 rounded-md flex items-center justify-between shadow-md">
      <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6 hidden lg:block" fill="none"
        viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <span class="flex-grow lg:pl-3" id="error-text">Error while Added Book!</span>
      <button type="button" class="text-white close lg:pb-2" onclick="closeErrorAlert()">
        <span aria-hidden="true" class="font-bold text-2xl">&times;</span>
      </button>
    </div>
  </div>

  <script>
    function closeErrorAlert() {
      document.getElementById('error-message').style.display = 'none';
    }
  </script>

  <div id="main" class="flex justify-center items-center flex-col mx-5 my-5 lg:mx-auto lg:mt-10 lg:mb-20">
    <div class="card !static bg-cyan-700 shadow-xl w-full sm:w-4/5 lg:h-auto lg:w-1/2 pb-3 lg:pb-0 mb-2">
      <div class="card-body p-4 lg:p-8 flex flex-col items-center w-full lg:justify-start lg:h-full lg:pl-8">
        <div class="mb-2 lg:mb-0 w-full flex justify-center flex-col">
          <h2 class="card-title text-white font-extrabold text-2xl justify-center mb-4 mt-2">
            Add Book
            <span class="text-base font-normal">for {{user.username}}</span>
          </h2>
          <div class="divider divider-info m-0 w-full"></div>
        </div>

        <div class="flex flex-col justify-center items-center w-full px-1 h-full">
          <div class="items-center md:w-4/5 lg:w-3/5">
            <div class="mb-2">
              <label for="title" class="font-medium text-white">Title :</label>
              <input type="text" id="title" name="title" value="" required
                class="mt-1 p-2 w-full shadow-sm sm:text-sm border-gray-300 rounded-md text-black bg-white h-6">
            </div>

            <div class="mb-2">
              <label for="description" class="font-medium text-white">Description :</label>
              <input type="text" id="description" name="description" value="" required
                class="mt-1 p-2 w-full shadow-sm sm:text-sm border-gray-300 rounded-md text-black bg-white h-6">
            </div>
          </div>

          <div class="flex justify-center items-center w-full">
            <div class="card-actions mt-4">
              <button id="addBookButton" class="w-full btn bg-green-950 h-10 text-white font-extrabold py-2 px-8">Add
                Book to Exchange</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div id="books-list" class="w-full flex justify-center items-center">
      <div class="card !static bg-cyan-700 shadow-xl w-full sm:w-4/5 lg:h-auto lg:w-1/2 pb-3 lg:pb-0 mt-2">
        <div class="card-body p-4 lg:p-8 flex flex-col items-center w-full lg:justify-start lg:h-full lg:pl-8">
          <h2 class="card-title text-white font-extrabold text-2xl justify-center mt-2 mb-2">{{user.username}}'s Books
            <span class="text-base font-normal">available for trade</span></h2>
          {{#if userBooks.length}}
          <table id="books-table" class="table !static text-center text-white text-lg bg-gray-800">
            {{#each userBooks}}
            <tr class="book-row">
              <td>
                <p class="font-bold">{{this.title}}</p>
                <p class="font-light">{{this.description}}</p>
              </td>
              <td>
                {{#if this.receiver}}
                received by
                {{this.receiver.username}}
                {{else}}
                ready
                {{/if}}
              </td>
              <td>
                {{#unless this.receiver}}
                <button class="delete-book-button btn btn-error bg-red-600" data-book-id="{{this.id}}">X</button>
                {{/unless}}
              </td>
            </tr>
            {{/each}}
          </table>
          {{else}}
          <table id="empty-user-books" class="table !static text-center text-white text-lg bg-gray-800">
            <tr>
              <td>
                You currently have no books
              </td>
            </tr>
          </table>
          {{/if}}
        </div>
      </div>
    </div>
  </div>

  <dialog id="my_modal_1" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Confirm Deletion</h3>
      <p class="py-4">Are you sure you want to delete this book?</p>
      <div class="modal-action">
        <button id="confirm-delete" class="btn btn-error">Delete</button>
        <button class="btn" onclick="document.getElementById('my_modal_1').close()">Cancel</button>
      </div>
    </div>
  </dialog>

  <script>
    const token = localStorage.getItem('jwtToken');
    const addBookButton = document.getElementById('addBookButton');
    const successMessage = document.getElementById('success-message');
    const successDelete = document.getElementById('success-delete');
    const errorMessage = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');
    const confirmDeleteButton = document.getElementById('confirm-delete');
    const modal = document.getElementById('my_modal_1');

    let bookIdToDelete = null;

    if (token && addBookButton) {
      addBookButton.addEventListener('click', () => {
        const title = document.getElementById('title').value;
        const description = document.getElementById('description').value;

        if (!title.trim() || !description.trim()) {
          errorText.textContent = 'Title and Description cannot be empty';
          errorMessage.style.display = 'block';
          setTimeout(() => {
            errorMessage.style.display = "none";
            errorText.textContent = 'Error while Added Book!';
          }, 5000);
          return;
        }

        const headers = new Headers();
        headers.append('Authorization', `Bearer ${token}`);
        headers.append('Content-Type', 'application/json');

        const requestOptions = {
          method: 'POST',
          headers: headers,
          body: JSON.stringify({ title, description })
        };

        fetch('my-books/add', requestOptions)
          .then(response => {
            if (!response.ok) {
              throw new Error('Failed to add book');
            }
            return response.json();
          })
          .then(data => {
            successMessage.style.display = "block";
            setTimeout(() => {
              successMessage.style.display = "none";
            }, 5000);

            const emptyMessage = document.getElementById('empty-user-books');
            if (emptyMessage) {
              emptyMessage.remove();
            }

            let bookList = document.querySelector('#books-table');
            if (!bookList) {
              bookList = document.createElement('table');
              bookList.id = 'books-table';
              bookList.classList.add('table', 'text-center', 'text-white', 'text-lg', 'bg-gray-800');
              document.querySelector('#books-list .card-body').appendChild(bookList);
            }

            const newRow = document.createElement('tr');
            newRow.classList.add('book-row');
            newRow.innerHTML = `
              <td>
                <p class="font-bold">${data.title}</p>
                <p class="font-light">${data.description}</p>
              </td>
              <td>${data.receiver ? `received by ${data.receiver.username}` : 'ready'}</td>
              <td>${!data.receiver ? `<button class="delete-book-button btn btn-error glass bg-red-600" data-book-id="${data.id}">X</button>` : ''}</td>
            `;
            bookList.appendChild(newRow);

            newRow.querySelector('.delete-book-button').addEventListener('click', function () {
              bookIdToDelete = this.getAttribute('data-book-id');
              modal.showModal();
            });
          })
          .catch(error => {
            console.error('Error adding book:', error.message);
            errorMessage.style.display = "block";
            setTimeout(() => {
              errorMessage.style.display = "none";
            }, 5000);
          });
      });
    } else {
      console.error('JWT token not found in local storage or add book button not found');
    }

    document.querySelectorAll('.delete-book-button').forEach(button => {
      button.addEventListener('click', function () {
        bookIdToDelete = this.getAttribute('data-book-id');
        modal.showModal();
      });
    });

    confirmDeleteButton.addEventListener('click', function () {
      const headers = new Headers();
      headers.append('Authorization', `Bearer ${token}`);
      headers.append('Content-Type', 'application/json');

      const requestOptions = {
        method: 'POST',
        headers: headers,
      };

      fetch(`/my-books/delete/${bookIdToDelete}`, requestOptions)
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to delete book');
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            document.querySelector(`.delete-book-button[data-book-id="${bookIdToDelete}"]`).parentElement.parentElement.remove();
            successDelete.style.display = "block";
            setTimeout(() => {
              successDelete.style.display = "none";
            }, 5000);
          }
        })
        .catch(error => {
          console.error('Error deleting book:', error.message);
          errorMessage.style.display = "block";
          setTimeout(() => {
            errorMessage.style.display = "none";
          }, 5000);
        });

      modal.close();
    });

  </script>

  {{> belowPart }}

</body>

</html>